import json
import boto3
import datetime
import logging
##------------------------##

##----------------------##
logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    logger.info("Lambda function triggered")
    logger.info(f"Event received: {event}")
    try:
        # Your business logic
        logger.info("Business logic executed successfully")
    except Exception as e:
        logger.error(f"An error occurred: {e}")
        raise

# Initialize the EC2 client
ec2 = boto3.client('ec2')

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger()

def get_instance_status(instance_ids):
    """
    Fetches the status of the specified EC2 instances.
    """
    try:
        response = ec2.describe_instance_status(InstanceIds=instance_ids)
        statuses = [
            {
                'InstanceId': status['InstanceId'],
                'State': status['InstanceState']['Name'],
                'Status': status['InstanceStatus']['Status']
            }
            for status in response['InstanceStatuses']
        ]
        return statuses
    except Exception as e:
        logger.error(f"Error fetching instance statuses: {str(e)}")
        return f"Error fetching instance statuses: {str(e)}"

def lambda_handler(event, context):
    """
    Lambda function to start or stop EC2 instances and report their statuses.
    """
    logger.info(f"Received event: {event}")

    # Extract the action and instance IDs from the event
    action = event.get("action")  # Expecting 'start' or 'stop'
    instance_ids = event.get("instance_ids")  # Expecting a list of instance IDs

    # Get the current day of the week
    current_day = datetime.datetime.now().strftime('%A')  # E.g., "Sunday"

    # If it's Sunday, skip starting instances
    if current_day == "Sunday" and action == "start":
        return {
            'statusCode': 200,
            'body': json.dumps('Skipped starting instances as today is Sunday.')
        }

    # Validate action and instance IDs
    if not action or not instance_ids:
        return {
            'statusCode': 400,
            'body': json.dumps('Error: Missing action or instance_ids in the event.')
        }

    if not isinstance(instance_ids, list):
        return {
            'statusCode': 400,
            'body': json.dumps('Error: instance_ids must be a list.')
        }

    try:
        if action == 'start':
            # Start the instances
            start_response = ec2.start_instances(InstanceIds=instance_ids)
            logger.info(f"Start response: {start_response}")
            statuses = get_instance_status(instance_ids)

            return {
                'statusCode': 200,
                'body': json.dumps({
                    'message': f'EC2 Instances {instance_ids} started successfully.',
                    'statuses': statuses
                })
            }

        elif action == 'stop':
            # Stop the instances
            stop_response = ec2.stop_instances(InstanceIds=instance_ids)
            logger.info(f"Stop response: {stop_response}")
            statuses = get_instance_status(instance_ids)

            return {
                'statusCode': 200,
                'body': json.dumps({
                    'message': f'EC2 Instances {instance_ids} stopped successfully.',
                    'statuses': statuses
                })
            }

        else:
            return {
                'statusCode': 400,
                'body': json.dumps('Error: Action must be either "start" or "stop".')
            }

    except boto3.exceptions.Boto3Error as e:
        logger.error(f"Boto3 error occurred: {str(e)}")
        return {
            'statusCode': 500,
            'body': json.dumps(f'Boto3 error: {str(e)}')
        }
    except Exception as e:
        logger.error(f"Unexpected error occurred: {str(e)}")
        return {
            'statusCode': 500,
            'body': json.dumps(f'Error: {str(e)}')
        }
